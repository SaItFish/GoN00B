// Package main
// @file: 1.go
// @date: 2021/3/24
package main

import (
	"fmt"
	"strconv"
	"strings"
)

func main() {
	var s string
	for {
		n, _ := fmt.Scanln(&s)
		if n == 0 {
			break
		}
		s = s[1 : len(s)-1]
		ss := strings.Split(s, ",")
		nums := make([]int, len(ss))
		for i := 0; i < len(ss); i++ {
			num, _ := strconv.Atoi(ss[i])
			nums[i] = num
		}
		fmt.Println(one(nums))
	}
}

/*
详细描述
给定一个含有正整数和负整数的环形数组 nums。 如果某个索引中的数 k 为正数，则向前移动 k 个索引。相反，如果是负数 (-k)，则向后移动 k 个索引。因为数组是环形的，所以可以假设最后一个元素的下一个元素是第一个元素，而第一个元素的前一个元素是最后一个元素。
确定 nums 中是否存在循环（或周期）。循环必须在相同的索引处开始和结束并且循环长度 > 1。此外，一个循环中的所有运动都必须沿着同一方向进行。换句话说，一个循环中不能同时包括向前的运动和向后的运动。

其他
时间限制: 1000ms
内存限制: 256.0MB
*/
func one(nums []int) bool {
	n := len(nums)
	for i := 0; i < n; i++ {
		pos := i
		if nums[pos] == n || nums[pos] == -n {
			break
		}
		visited := make(map[int]bool, 0)
		visited[i] = true

		if nums[pos] > 0 {
			for nums[pos] > 0 {
				pos = (pos + nums[pos] + n) % n
				if visited[pos] {
					return true
				}
				visited[pos] = true
			}
		} else {
			for nums[pos] < 0 {
				pos = (pos + nums[pos] + n) % n
				if visited[pos] {
					return true
				}
				visited[pos] = true
			}
		}
	}
	return false
}
