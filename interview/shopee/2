// Package main
// @file: 2.go
// @date: 2021/3/24
package main

import (
	"fmt"
	"strconv"
	"strings"
)

func main() {
	var s string
	for {
		n, _ := fmt.Scanln(&s)
		if n == 0 {
			break
		}
		fmt.Printf("[%s]\n", strings.Join(two(s[1:len(s)-1]), ","))
	}
}

/*
详细描述
给定一个只包含数字的字符串，复原它并返回所有可能的 IPv4 地址格式。
有效的 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 '.' 分隔。
例如："0.1.2.201" 和 "192.168.1.1" 是 有效的 IP 地址，但是 "0.011.255.245"、"192.168.1.312" 和 "192.168@1.1" 是 无效的 IP 地址。

其他
时间限制: 1000ms
内存限制: 256.0MB
*/
func two(s string) []string {
	n := len(s)
	res := make([]string, 0)
	if n < 4 {
		return res
	}
	for i := 0; i < n; i++ {
		if s[i] < '0' || s[i] > '9' {
			return res
		}
	}
	memo := make(map[string]int, 0)
	helper := func(ip string) bool {
		m := len(ip)
		if m > 1 && ip[0] == '0' {
			return false
		}
		if _, ok := memo[ip]; !ok {
			num, _ := strconv.Atoi(ip)
			memo[ip] = num
		}
		return memo[ip] < 256
	}
	for i := 1; i < n-2; i++ {
		for j := i + 1; j < n-1; j++ {
			for k := j + 1; k < n; k++ {
				ip1, ip2, ip3, ip4 := s[:i], s[i:j], s[j:k], s[k:]
				if helper(ip1) && helper(ip2) && helper(ip3) && helper(ip4) {
					res = append(res, fmt.Sprintf("\"%s\"", strings.Join([]string{ip1, ip2, ip3, ip4}, ".")))
				}
			}
		}
	}
	return res
}
