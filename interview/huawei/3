package main

import "fmt"

/*
输入
N(人数) M(比赛次数)
选手1 > 选手2
...

选手组成一个图
从每个选手出发，能达到所有其它选手，即可以确定名次
*/
func main() {
	var (
		N, M int

		match [][]int // N*N 矩阵，存储比赛结果, match[i][j] == 1，说明选手 i 胜过选手 j; -1 为 i 输给了 j，0 为无比赛

		player1, player2 int
	)
	fmt.Scanln(&N, &M)
	match = make([][]int, N+1)
	for i := 0; i <= N; i++ {
		match[i] = make([]int, N+1)
	}

	for i := 0; i < M; i++ {
		fmt.Scanln(&player1, &player2)
		match[player1][player2] = 1
		match[player2][player1] = -1
	}

	res := 0
	// 对每个选手循环
	for i := 1; i <= N; i++ {
		cnt := 0
		visited := make([]bool, N+1)
		visited[i] = true
		// 对其余选手循环
		for j := 1; j <= N; j++ {
			if visited[j] {
				continue
			}
			if match[i][j] == 0 {
				continue
			}

			visited[j] = true
			cnt++

			if match[i][j] == 1 {
				queue := make([]int, 0)
				queue = append(queue, j)
				// 迭代统计赢过的选手
				for len(queue) != 0 {
					x := queue[0]
					queue = queue[1:]

					for k := 1; k <= N; k++ {
						if visited[k] {
							continue
						}
						if match[x][k] == 1 {
							queue = append(queue, k)
							visited[k] = true
							cnt++
						}
					}
				}
			} else if match[i][j] == -1 {
				queue := make([]int, 0)
				queue = append(queue, j)
				// 迭代统计输过的选手
				for len(queue) != 0 {
					x := queue[0]
					queue = queue[1:]

					for k := 1; k <= N; k++ {
						if visited[k] {
							continue
						}
						if match[x][k] == -1 {
							queue = append(queue, k)
							visited[k] = true
							cnt++
						}
					}
				}
			}
		}
		if cnt == N-1 {
			res++
		}
	}
	fmt.Println(res)
}

/*
5 5
4 3
4 2
3 2
1 2
2 5
*/
